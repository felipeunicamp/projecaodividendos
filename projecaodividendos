import streamlit as st
import pandas as pd
from selenium import webdriver
from webdriver_manager.firefox import GeckoDriverManager
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.firefox.options import Options
import time
from bs4 import BeautifulSoup
import plotly.graph_objects as go
import re
import atexit
import psutil
import os
import logging

# Configurar logging para suprimir mensagens desnecess√°rias
logging.getLogger('selenium').setLevel(logging.ERROR)
logging.getLogger('urllib3').setLevel(logging.ERROR)
logging.getLogger('webdriver_manager').setLevel(logging.ERROR)

# Configura√ß√£o da p√°gina
st.set_page_config(
    page_title="Proje√ß√£o de Dividendos",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Lista global para rastrear drivers ativos
if 'active_drivers' not in st.session_state:
    st.session_state.active_drivers = []


def cleanup_drivers():
    """Limpa todos os drivers ativos"""
    for driver in st.session_state.active_drivers:
        try:
            driver.quit()
        except:
            pass
    st.session_state.active_drivers.clear()


def kill_firefox_processes():
    """Mata processos Firefox √≥rf√£os"""
    try:
        for proc in psutil.process_iter(['pid', 'name']):
            if 'firefox' in proc.info['name'].lower() or 'geckodriver' in proc.info['name'].lower():
                try:
                    proc.kill()
                except:
                    pass
    except:
        pass


# Registrar cleanup no exit
atexit.register(cleanup_drivers)


@st.cache_resource
def get_driver_manager():
    """Retorna o caminho do driver (cached)"""
    # Suprimir output do webdriver manager
    import sys
    from contextlib import redirect_stdout, redirect_stderr
    from io import StringIO

    f = StringIO()
    with redirect_stdout(f), redirect_stderr(f):
        return GeckoDriverManager().install()


def create_driver():
    """Cria um novo driver com configura√ß√µes otimizadas"""
    options = Options()
    options.add_argument('--headless')
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-gpu')
    options.add_argument('--window-size=1920,1080')
    options.add_argument('--disable-extensions')
    options.add_argument('--disable-plugins')
    options.add_argument('--disable-images')
    options.add_argument('--disable-javascript')
    options.add_argument('--disable-css')
    options.add_argument('--disable-logging')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-background-timer-throttling')
    options.add_argument('--disable-backgrounding-occluded-windows')
    options.add_argument('--disable-renderer-backgrounding')
    options.add_argument('--disable-features=TranslateUI')
    options.add_argument('--disable-ipc-flooding-protection')
    options.add_argument('--silent')

    # Suprimir logs do Firefox
    options.set_preference("devtools.console.stdout.content", False)
    options.set_preference("browser.dom.window.dump.enabled", False)
    options.set_preference("devtools.console.stdout.chrome", False)

    try:
        # Suprimir output durante a cria√ß√£o do driver
        import sys
        from contextlib import redirect_stdout, redirect_stderr
        from io import StringIO

        f = StringIO()
        with redirect_stdout(f), redirect_stderr(f):
            driver_path = get_driver_manager()
            service = Service(driver_path, log_path=os.devnull)  # Suprimir logs do service
            driver = webdriver.Firefox(service=service, options=options)
            driver.set_page_load_timeout(30)
            driver.implicitly_wait(10)

        # Adicionar √† lista de drivers ativos
        st.session_state.active_drivers.append(driver)

        return driver
    except Exception as e:
        st.error(f"Erro ao configurar o navegador: {str(e)}")
        return None


def safe_driver_quit(driver):
    """Fecha o driver de forma segura"""
    try:
        if driver:
            # Suprimir output durante o fechamento
            import sys
            from contextlib import redirect_stdout, redirect_stderr
            from io import StringIO

            f = StringIO()
            with redirect_stdout(f), redirect_stderr(f):
                driver.quit()

            if driver in st.session_state.active_drivers:
                st.session_state.active_drivers.remove(driver)
    except Exception as e:
        # N√£o mostrar warnings de fechamento
        pass


def processar_acao(acao, navegador, progress_bar, status_text):
    """Fun√ß√£o para processar uma √∫nica a√ß√£o"""
    try:
        status_text.text(f"Processando {acao.upper()}...")

        # Verificar se o driver ainda est√° ativo
        try:
            navegador.current_url
        except:
            st.error(f"Driver inativo para {acao.upper()}")
            return None

        # Navegar para a p√°gina (sem mostrar URL)
        import sys
        from contextlib import redirect_stdout, redirect_stderr
        from io import StringIO

        f = StringIO()
        with redirect_stdout(f), redirect_stderr(f):
            navegador.get(f'https://playinvest.com.br/dividendos/{acao}')

        time.sleep(3)

        html = navegador.page_source
        soup = BeautifulSoup(html, 'html.parser')

        data = []
        tabela = soup.find('div', class_='card featured-card per-year-chart')

        if not tabela:
            st.warning(f"‚ö†Ô∏è Tabela n√£o encontrada para {acao.upper()}")
            return None

        linhas = tabela.find_all('tr')

        for linha in linhas:
            colunas = linha.find_all(['th', 'td'])
            for coluna in colunas:
                row_data = coluna.get_text(strip=True)
                data.append(row_data)

        filtered_data = [item for item in data if item != '']

        if len(filtered_data) < 4:
            st.warning(f"‚ö†Ô∏è Dados insuficientes para {acao.upper()}")
            return None

        # Organizar a lista em pares (Ano, Proventos)
        organized_data = [(filtered_data[i], filtered_data[i + 1]) for i in range(2, len(filtered_data), 2)]

        # Criar o DataFrame
        df = pd.DataFrame(organized_data, columns=['Ano', 'Proventos'])

        # Converter Proventos para float
        df['Proventos'] = df['Proventos'].str.replace('R$', '').str.replace('.', '').str.replace(',', '.').astype(float)
        df['Proventos'] = round(df['Proventos'] / 100, 2)

        # Converter Ano para int
        df['Ano'] = df['Ano'].astype(int)

        # Criar df_final com todos os anos consecutivos
        ano_inicial = df['Ano'].min()
        ano_final = df['Ano'].max()

        anos_completos = list(range(ano_inicial, ano_final + 1))
        df_final = pd.DataFrame({'Ano': anos_completos})

        df_final = df_final.merge(df, on='Ano', how='left')
        df_final['Proventos'] = df_final['Proventos'].fillna(0)

        df_final['Varia√ß√£o'] = df_final['Proventos'] - df_final['Proventos'].shift(1)
        df_final['Varia√ß√£o'] = df_final['Varia√ß√£o'].fillna(0)

        # ‚ú® TRATAMENTO ESPECIAL PARA ISAE4 ‚ú®
        if acao.upper() == 'ISAE4':
            # Para ISAE4, usar o dividendo de 2025 como base para 2024
            if 2025 in df_final['Ano'].values:
                dividendo_2025 = df_final[df_final['Ano'] == 2025]['Proventos'].iloc[0]
                # Atualizar o valor de 2024 com o valor de 2025
                df_final.loc[df_final['Ano'] == 2024, 'Proventos'] = dividendo_2025
                st.info(f"üîÑ ISAE4: Usando dividendo de 2025 (R$ {dividendo_2025:.2f}) como base para 2024")

            # Recalcular as varia√ß√µes ap√≥s a altera√ß√£o
            df_final['Varia√ß√£o'] = df_final['Proventos'] - df_final['Proventos'].shift(1)
            df_final['Varia√ß√£o'] = df_final['Varia√ß√£o'].fillna(0)

        # Criar df_final2 sem o ano de 2025 (se houver)
        df_final2 = df_final[df_final['Ano'] != 2025].copy()

        # Calcular m√©dias
        variacao_avg = df_final2['Varia√ß√£o'].mean()
        variacao_avg5 = df_final2['Varia√ß√£o'].tail(5).mean()
        variacao_avg2 = df_final2['Varia√ß√£o'].tail(2).mean()

        # Obter o dividendo de 2024
        dividendo_2024 = df_final2[df_final2['Ano'] == 2024]['Proventos'].iloc[0] if 2024 in df_final2[
            'Ano'].values else df_final2['Proventos'].iloc[-1]

        # üöÄ CRIAR PROJE√á√ïES CUMULATIVAS üöÄ
        anos_projecao = [2025, 2026, 2027, 2028, 2029]

        # Cen√°rio 1: Proje√ß√£o cumulativa com m√©dia total
        projecao_cenario1 = []
        valor_atual = dividendo_2024
        for ano in anos_projecao:
            valor_atual = round(valor_atual + variacao_avg, 2)
            projecao_cenario1.append(valor_atual)

        # Cen√°rio 2: Proje√ß√£o cumulativa com m√©dia 5 anos
        projecao_cenario2 = []
        valor_atual = dividendo_2024
        for ano in anos_projecao:
            valor_atual = round(valor_atual + variacao_avg5, 2)
            projecao_cenario2.append(valor_atual)

        # Cen√°rio 3: Proje√ß√£o cumulativa com m√©dia 2 anos
        projecao_cenario3 = []
        valor_atual = dividendo_2024
        for ano in anos_projecao:
            valor_atual = round(valor_atual + variacao_avg2, 2)
            projecao_cenario3.append(valor_atual)

        # Dados hist√≥ricos
        df_historico = df_final2[df_final2['Ano'] <= 2024].copy()

        resultado = {
            'acao': acao,
            'df_historico': df_historico,
            'projecao_cenario1': projecao_cenario1,
            'projecao_cenario2': projecao_cenario2,
            'projecao_cenario3': projecao_cenario3,
            'anos_projecao': anos_projecao,
            'dividendo_2024': dividendo_2024,
            'variacao_avg': variacao_avg,
            'variacao_avg5': variacao_avg5,
            'variacao_avg2': variacao_avg2,
            'df_completo': df_final2,
            'tratamento_especial': acao.upper() == 'ISAE4'
        }

        return resultado

    except Exception as e:
        st.error(f"‚ùå Erro ao processar {acao.upper()}: {str(e)}")
        return None


def criar_grafico(resultado):
    """Fun√ß√£o para criar gr√°fico de uma a√ß√£o"""
    acao = resultado['acao']
    df_historico = resultado['df_historico']
    projecao_cenario1 = resultado['projecao_cenario1']
    projecao_cenario2 = resultado['projecao_cenario2']
    projecao_cenario3 = resultado['projecao_cenario3']
    anos_projecao = resultado['anos_projecao']

    # Criar o gr√°fico
    fig = go.Figure()

    # Adicionar linha dos dados hist√≥ricos
    fig.add_trace(go.Scatter(
        x=df_historico['Ano'],
        y=df_historico['Proventos'],
        mode='lines+markers',
        name='Dados Hist√≥ricos',
        line=dict(color='#2E86C1', width=3),
        marker=dict(size=8, color='#2E86C1'),
        hovertemplate='<b>%{x}</b><br>Dividendo: R$ %{y:.2f}<extra></extra>'
    ))

    # Obter √∫ltimo ano e valor hist√≥rico
    ultimo_ano = df_historico['Ano'].iloc[-1]
    ultimo_valor = df_historico['Proventos'].iloc[-1]

    # Cen√°rio 1
    anos_cenario1 = [ultimo_ano] + anos_projecao
    valores_cenario1 = [ultimo_valor] + projecao_cenario1
    fig.add_trace(go.Scatter(
        x=anos_cenario1,
        y=valores_cenario1,
        mode='lines+markers',
        name='Cen√°rio 1: M√©dia Total',
        line=dict(color='#E74C3C', width=2, dash='dash'),
        marker=dict(size=6, color='#E74C3C', symbol='square'),
        hovertemplate='<b>%{x}</b><br>Proje√ß√£o: R$ %{y:.2f}<extra></extra>'
    ))

    # Cen√°rio 2
    anos_cenario2 = [ultimo_ano] + anos_projecao
    valores_cenario2 = [ultimo_valor] + projecao_cenario2
    fig.add_trace(go.Scatter(
        x=anos_cenario2,
        y=valores_cenario2,
        mode='lines+markers',
        name='Cen√°rio 2: M√©dia 5 Anos',
        line=dict(color='#28B463', width=2, dash='dash'),
        marker=dict(size=6, color='#28B463', symbol='triangle-up'),
        hovertemplate='<b>%{x}</b><br>Proje√ß√£o: R$ %{y:.2f}<extra></extra>'
    ))

    # Cen√°rio 3
    anos_cenario3 = [ultimo_ano] + anos_projecao
    valores_cenario3 = [ultimo_valor] + projecao_cenario3
    fig.add_trace(go.Scatter(
        x=anos_cenario3,
        y=valores_cenario3,
        mode='lines+markers',
        name='Cen√°rio 3: M√©dia 2 Anos',
        line=dict(color='#F39C12', width=2, dash='dash'),
        marker=dict(size=6, color='#F39C12', symbol='diamond'),
        hovertemplate='<b>%{x}</b><br>Proje√ß√£o: R$ %{y:.2f}<extra></extra>'
    ))

    # Linha vertical
    fig.add_vline(x=ultimo_ano + 0.5,
                  line_dash="dot",
                  line_color="gray",
                  opacity=0.7,
                  annotation_text="In√≠cio das Proje√ß√µes",
                  annotation_position="top")

    # T√≠tulo especial para ISAE4
    titulo_base = f'Evolu√ß√£o e Proje√ß√£o de Dividendos - {acao.upper()}'
    if resultado.get('tratamento_especial', False):
        titulo_base += ' (Base 2024 = Dividendo 2025)'

    # Layout
    fig.update_layout(
        title={
            'text': titulo_base,
            'x': 0.5,
            'xanchor': 'center',
            'font': {'size': 18, 'family': 'Arial Black'}
        },
        xaxis_title='Ano',
        yaxis_title='Dividendos (R$)',
        font=dict(size=11),
        hovermode='x unified',
        legend=dict(
            orientation="v",
            yanchor="top",
            y=1,
            xanchor="left",
            x=1.02,
            bgcolor="rgba(255,255,255,0.9)",
            bordercolor="rgba(0,0,0,0.2)",
            borderwidth=1,
            font=dict(size=10)
        ),
        plot_bgcolor='white',
        paper_bgcolor='white',
        height=500,
        margin=dict(l=60, r=150, t=80, b=60)
    )

    # Grid
    fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')
    fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='rgba(128,128,128,0.2)')

    return fig


def validar_codigo_acao(codigo):
    """Valida se o c√≥digo da a√ß√£o est√° no formato correto"""
    # Padr√£o: 4 letras + 1 ou 2 d√≠gitos (ex: PETR4, VALE3, BBAS3)
    padrao = r'^[A-Za-z]{4}\d{1,2}$'
    return bool(re.match(padrao, codigo))


# INTERFACE STREAMLIT
def main():
    # T√≠tulo principal
    st.title("üìä Proje√ß√£o de Dividendos")
    st.markdown("---")

    # Bot√£o para limpar cache e processos
    if st.sidebar.button("üßπ Limpar Cache e Processos", help="Use se houver problemas com o navegador"):
        cleanup_drivers()
        kill_firefox_processes()
        st.cache_resource.clear()
        st.success("‚úÖ Cache limpo e processos finalizados!")
        st.rerun()

    # Sidebar para configura√ß√µes
    with st.sidebar:
        st.header("‚öôÔ∏è Configura√ß√µes")

        # Input para a√ß√µes
        st.subheader("üìà A√ß√µes para An√°lise")
        acoes_input = st.text_area(
            "Digite os c√≥digos das a√ß√µes (separados por v√≠rgula):",
            value="PINE4, BBAS3, ABCB4",
            help="Exemplo: PETR4, VALE3, ITUB4, ISAE4"
        )

        # Processar input das a√ß√µes
        if acoes_input:
            acoes_lista = [acao.strip().lower() for acao in acoes_input.split(',') if acao.strip()]
            acoes_validas = []
            acoes_invalidas = []

            for acao in acoes_lista:
                if validar_codigo_acao(acao):
                    acoes_validas.append(acao)
                else:
                    acoes_invalidas.append(acao)

            if acoes_invalidas:
                st.warning(f"‚ö†Ô∏è C√≥digos inv√°lidos: {', '.join(acoes_invalidas)}")

            if acoes_validas:
                st.success(f"‚úÖ {len(acoes_validas)} a√ß√µes v√°lidas: {', '.join([a.upper() for a in acoes_validas])}")

                # Mostrar aviso especial para ISAE4
                if any(acao.upper() == 'ISAE4' for acao in acoes_validas):
                    st.info("‚ÑπÔ∏è **ISAE4**: Ser√° usado o dividendo de 2025 como base para 2024")

        # Bot√£o para processar
        processar = st.button("üöÄ Processar An√°lise", type="primary", use_container_width=True)

        st.markdown("---")
        st.subheader("‚ÑπÔ∏è Sobre os Cen√°rios")
        st.markdown("""
        **Cen√°rio 1**: M√©dia hist√≥rica total (cumulativa)

        **Cen√°rio 2**: M√©dia dos √∫ltimos 5 anos (cumulativa)

        **Cen√°rio 3**: M√©dia dos √∫ltimos 2 anos (cumulativa)

        üìà **Proje√ß√£o Cumulativa:**
        - 2025 = Dividendo 2024 + M√©dia
        - 2026 = Dividendo 2025 + M√©dia
        - 2027 = Dividendo 2026 + M√©dia
        - E assim por diante...

        ---

        **‚ö†Ô∏è Tratamento Especial:**

        **ISAE4**: Dividendo 2024 = Dividendo 2025
        """)

    # √Årea principal
    if not processar:
        # Tela inicial
        col1, col2, col3 = st.columns([1, 2, 1])
        with col2:
            st.markdown("""
            ### üéØ Como usar:

            1. **Digite os c√≥digos das a√ß√µes** na barra lateral
            2. **Clique em "Processar An√°lise"**
            3. **Visualize os gr√°ficos e proje√ß√µes**

            ### üìä O que voc√™ ver√°:
            - Hist√≥rico de dividendos
            - 3 cen√°rios de proje√ß√£o **cumulativa** para 2025-2029
            - Tabelas com dados detalhados
            - Resumo comparativo

            ### üîß Problemas?
            - Use o bot√£o "Limpar Cache e Processos" na barra lateral

            ### ‚ö†Ô∏è Tratamentos Especiais:
            - **ISAE4**: O dividendo de 2024 ser√° igual ao de 2025

            ### üìà Nova Metodologia:
            - **Proje√ß√£o Cumulativa**: Cada ano √© baseado no anterior + m√©dia
            - **Crescimento Progressivo**: Reflete melhor a evolu√ß√£o temporal
            """)

    else:
        if not acoes_validas:
            st.error("‚ùå Nenhuma a√ß√£o v√°lida foi inserida!")
            return

        # Limpar drivers antigos antes de come√ßar
        cleanup_drivers()

        # Criar novo driver
        with st.spinner("üîß Inicializando navegador..."):
            driver = create_driver()

        if not driver:
            st.error("‚ùå N√£o foi poss√≠vel inicializar o navegador!")
            return

        # Barra de progresso
        progress_bar = st.progress(0)
        status_text = st.empty()

        resultados = []
        total_acoes = len(acoes_validas)

        try:
            # Processar cada a√ß√£o
            for i, acao in enumerate(acoes_validas):
                resultado = processar_acao(acao, driver, progress_bar, status_text)
                if resultado:
                    resultados.append(resultado)

                # Atualizar progresso
                progress_bar.progress((i + 1) / total_acoes)
                time.sleep(1)

            # Limpar status
            status_text.empty()
            progress_bar.empty()

            if not resultados:
                st.error("‚ùå Nenhuma a√ß√£o foi processada com sucesso!")
                return

            # Mostrar resultados
            st.success(f"‚úÖ {len(resultados)} a√ß√µes processadas com sucesso!")

            # Tabs para organizar conte√∫do
            tab1, tab2, tab3 = st.tabs(["üìä Gr√°ficos", "üìã Dados Detalhados", "üìà Resumo Comparativo"])

            with tab1:
                st.header("üìä Gr√°ficos de Proje√ß√£o Cumulativa")

                for resultado in resultados:
                    st.subheader(f"üìà {resultado['acao'].upper()}")

                    # Mostrar aviso especial para ISAE4
                    if resultado.get('tratamento_especial', False):
                        st.info("üîÑ **Tratamento Especial**: Dividendo 2024 baseado no valor de 2025")

                    fig = criar_grafico(resultado)
                    st.plotly_chart(fig, use_container_width=True)

                    # M√©tricas r√°pidas
                    col1, col2, col3, col4 = st.columns(4)
                    with col1:
                        label_2024 = "üí∞ Dividendo 2024*" if resultado.get('tratamento_especial',
                                                                          False) else "üí∞ Dividendo 2024"
                        st.metric(label_2024, f"R$ {resultado['dividendo_2024']:.2f}")
                    with col2:
                        st.metric("üìä Cen√°rio 1 (2029)", f"R$ {resultado['projecao_cenario1'][-1]:.2f}")
                    with col3:
                        st.metric("üìä Cen√°rio 2 (2029)", f"R$ {resultado['projecao_cenario2'][-1]:.2f}")
                    with col4:
                        st.metric("üìä Cen√°rio 3 (2029)", f"R$ {resultado['projecao_cenario3'][-1]:.2f}")

                    st.markdown("---")

            with tab2:
                st.header("üìã Dados Detalhados")

                for resultado in resultados:
                    with st.expander(f"üìä Dados de {resultado['acao'].upper()}"):
                        # Mostrar aviso especial para ISAE4
                        if resultado.get('tratamento_especial', False):
                            st.warning("‚ö†Ô∏è **ISAE4**: Os dados de 2024 foram ajustados com base no dividendo de 2025")

                        # Dados hist√≥ricos
                        st.subheader("üìà Hist√≥rico de Dividendos")
                        st.dataframe(resultado['df_historico'], use_container_width=True)

                        # Proje√ß√µes
                        st.subheader("üîÆ Proje√ß√µes Cumulativas 2025-2029")
                        df_projecoes = pd.DataFrame({
                            'Ano': resultado['anos_projecao'],
                            'Cen√°rio 1': resultado['projecao_cenario1'],
                            'Cen√°rio 2': resultado['projecao_cenario2'],
                            'Cen√°rio 3': resultado['projecao_cenario3']
                        })
                        st.dataframe(df_projecoes, use_container_width=True)

                        # Mostrar as m√©dias utilizadas
                        st.subheader("üìä M√©dias de Varia√ß√£o Utilizadas")
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("M√©dia Total", f"{resultado['variacao_avg']:.2f}")
                        with col2:
                            st.metric("M√©dia 5 Anos", f"{resultado['variacao_avg5']:.2f}")
                        with col3:
                            st.metric("M√©dia 2 Anos", f"{resultado['variacao_avg2']:.2f}")

            with tab3:
                st.header("üìà Resumo Comparativo")

                # Criar tabela comparativa
                dados_comparativos = []
                for resultado in resultados:
                    acao_nome = resultado['acao'].upper()
                    if resultado.get('tratamento_especial', False):
                        acao_nome += "*"

                    dados_comparativos.append({
                        'A√ß√£o': acao_nome,
                        'Dividendo 2024': f"R$ {resultado['dividendo_2024']:.2f}",
                        'Var. M√©dia Total': f"{resultado['variacao_avg']:.2f}",
                        'Var. M√©dia 5 Anos': f"{resultado['variacao_avg5']:.2f}",
                        'Var. M√©dia 2 Anos': f"{resultado['variacao_avg2']:.2f}",
                        'Cen√°rio 1 (2029)': f"R$ {resultado['projecao_cenario1'][-1]:.2f}",
                        'Cen√°rio 2 (2029)': f"R$ {resultado['projecao_cenario2'][-1]:.2f}",
                        'Cen√°rio 3 (2029)': f"R$ {resultado['projecao_cenario3'][-1]:.2f}"
                    })

                df_comparativo = pd.DataFrame(dados_comparativos)
                st.dataframe(df_comparativo, use_container_width=True)

                # Mostrar legenda se houver tratamento especial
                if any(resultado.get('tratamento_especial', False) for resultado in resultados):
                    st.caption("* A√ß√µes com tratamento especial (ISAE4: Dividendo 2024 = Dividendo 2025)")

                # Download dos dados
                csv = df_comparativo.to_csv(index=False)
                st.download_button(
                    label="üì• Download CSV",
                    data=csv,
                    file_name="projecao_dividendos_cumulativa.csv",
                    mime="text/csv"
                )

        finally:
            # Fechar driver de forma segura
            safe_driver_quit(driver)


if __name__ == "__main__":
    main()
